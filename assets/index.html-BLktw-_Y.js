import{_ as t,c as a,a as s,o as n}from"./app-CHQIiBnY.js";const r={};function o(c,e){return n(),a("div",null,e[0]||(e[0]=[s('<p>​ 多态是指同一个接口或父类引用的变量可以指向不同的对象实例，并根据指向的对象类型执行相应的方法，同一个方法可以在不同的对象上表现出不同的行为。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span><strong>优点</strong></span></a></h3><p>通过多态，程序可以灵活处理不同类型的对象，降低代码耦合度，提高代码的可扩展性。新增子类或实现类时，无需改变原有代码，只需通过接口或父类引用调用即可。</p><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span><strong>扩展</strong></span></a></h3><p>多态分为 编译时多态 和 运行时多态 ，</p><p><strong>编译时多态</strong>：也称静态多态，在编译时确认方法的调用，主要通过重载实现；</p><p><strong>运行时多态</strong>：也称动态多态，在运行时确认方法的调用，主要通过重写实现。</p>',7)]))}const d=t(r,[["render",o],["__file","index.html.vue"]]),m=JSON.parse(`{"path":"/study/hj2measc/","title":"002、什么是 JAVA 的多态特性","lang":"zh-CN","frontmatter":{"title":"002、什么是 JAVA 的多态特性","author":null,"createTime":"2025/02/08 22:04:25","permalink":"/study/hj2measc/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"扩展","slug":"扩展","link":"#扩展","children":[]}],"readingTime":{"minutes":0.77,"words":232},"git":{"updatedTime":1739699555000,"contributors":[{"name":"洪子丹","email":"302778213@qq.com","commits":1}]},"filePathRelative":"notes/study/recite/002、什么是 JAVA 的多态特性.md"}`);export{d as comp,m as data};
