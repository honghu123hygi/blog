import{_ as a,c as i,a as t,o as n}from"./app-CHQIiBnY.js";const l={};function s(c,e){return n(),i("div",null,e[0]||(e[0]=[t('<h2 id="_1-解释一下什么是cap" tabindex="-1"><a class="header-anchor" href="#_1-解释一下什么是cap"><span>1.解释一下什么是CAP？</span></a></h2><ul><li>Consistency：一致性就是在客户端任何时候看到各节点的数据都是一致的。</li><li>Availability：可用性就是在任何时刻都可以提供读写。</li><li>Partition Tolerance：分区容错性是在网络故障、某些节点不能通信的时候系统仍能继续工作。 具体地讲在分布式系统中，在任何数据库设计中，一个Web应用最多只能同时支持上面的两个属性。显然，任何横向扩展策略都要依赖于数据分区。因此，设计人员必须在一致性与可用性之间做出选择。 <img src="http://blog-img.coolsen.cn/img/801753-20151107213219867-1667011131.png" alt="img"></li></ul><p>AP（高可用&amp;&amp;分区容错）:</p><p>允许至少一个节点更新状态会导致数据不一致，即丧失了C性质（一致性）。会导致全局的数据不一致。</p><p>CP（一致&amp;&amp;分区容错）:</p><p>为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质（可用性）。分区同步会导致同步时间无限延长（也就是等数据同步完成之后才能正常访问）</p><p>CA（一致&amp;&amp;高可用）:</p><p>两个节点可以互相通信，才能既保证C（一致性）又保证A（可用性），这又会导致丧失P性质（分区容错性）。这样的话就分布式节点受阻，无法部署子节点,放弃了分布式系统的可扩展性。因为分布式系统与单机系统不同，它涉及到多节点间的通讯和交互，节点间的分区故障是必然发生的，所以在分布式系统中分区容错性是必须要考虑的。</p><h2 id="_2-什么分布式事务" tabindex="-1"><a class="header-anchor" href="#_2-什么分布式事务"><span>2.什么分布式事务？</span></a></h2><p>分布式事务服务（Distributed Transaction Service，DTS）是一个分布式事务框架，用来保障在大规模分布式环境下事务的最终一致性。</p><p>CAP理论告诉我们在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的，所以我们只能在一致性和可用性之间进行权衡。</p><p>为了保障系统的可用性，互联网系统大多将强一致性需求转换成最终一致性的需求，并通过系统执行幂等性的保证，保证数据的最终一致性。</p><h2 id="_3-了解base理论吗" tabindex="-1"><a class="header-anchor" href="#_3-了解base理论吗"><span>3.了解BASE理论吗？</span></a></h2><p>BASE理论指的是：</p><ul><li>Basically Available（基本可用）</li><li>Soft state（软状态）</li><li>Eventually consistent（最终一致性） BASE理论是对CAP中的一致性和可用性进行一个权衡的结果，是对互联网大规模分布式系统的实践总结，强调可用性。</li></ul><p>理论的核心思想就是：基本可用（Basically Available）和最终一致性（Eventually consistent）。虽然无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。</p><h2 id="_4-实现分布式事务一致性-consistency-的方法有哪些" tabindex="-1"><a class="header-anchor" href="#_4-实现分布式事务一致性-consistency-的方法有哪些"><span>4.实现分布式事务一致性（Consistency）的方法有哪些?</span></a></h2><p>最著名的就是二阶段提交协议、三阶段提交协议和Paxos算法。</p><p><strong>两阶段提交协议</strong></p><ul><li>prepare(准备阶段)</li></ul><p>当开始事务调用的时候，事务处理器向事务执行者（有可能是数据库本身支持）发出命令，事务执行者进行prepare操作。 当所有事务执行者都完成了prepare操作，就进行下一步行为。 如果有一个事务执行者在执行prepare的时候失败了，那么通知事务处理器，事务处理器再通知所有的事务执行者执行回滚操作。</p><ul><li>commit(提交阶段)</li></ul><p>当所有事务执行者都prepare成功以后，事务处理器会再次发送commit请求给事务执行者，所有事务执行者进行commit处理。 当所有commit处理都成功了，那么事务执行结束。 如果有一个事务执行者的commit处理不成功，这个时候就要通知事务处理器，事务处理器通知所有的事务执行者执行回滚(abort)操作。 但是两阶段提交的诟病就是在于性能问题。比如由于执行链比较长，锁定资源的时间也变长了。所以在高性能的系统中都会避免使用二阶段提交。</p>',23)]))}const p=a(l,[["render",s],["__file","index.html.vue"]]),o=JSON.parse(`{"path":"/interview/Distributed/5ujg0j97/","title":"分布式","lang":"zh-CN","frontmatter":{"title":"分布式","author":null,"createTime":"2024/04/21 14:32:54","permalink":"/interview/Distributed/5ujg0j97/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"1.解释一下什么是CAP？","slug":"_1-解释一下什么是cap","link":"#_1-解释一下什么是cap","children":[]},{"level":2,"title":"2.什么分布式事务？","slug":"_2-什么分布式事务","link":"#_2-什么分布式事务","children":[]},{"level":2,"title":"3.了解BASE理论吗？","slug":"_3-了解base理论吗","link":"#_3-了解base理论吗","children":[]},{"level":2,"title":"4.实现分布式事务一致性（Consistency）的方法有哪些?","slug":"_4-实现分布式事务一致性-consistency-的方法有哪些","link":"#_4-实现分布式事务一致性-consistency-的方法有哪些","children":[]}],"readingTime":{"minutes":3.82,"words":1147},"git":{"updatedTime":1717132990000,"contributors":[{"name":"hongzidan","email":"3027708213@qq.com","commits":1}]},"filePathRelative":"notes/interview/Distributed/5ujg0j97.md"}`);export{p as comp,o as data};
