import{_ as a,c as r,b as e,d as t,o as s}from"./app-CHQIiBnY.js";const o={};function c(l,n){return s(),r("div",null,n[0]||(n[0]=[e("p",null,"​ IOC（Inversion of control）即控制反转，即让对象的创建与管理由 Spring 容器负责，而不是由对象自身控制。这种机制可以使程序更加灵活和解耦，提升代码的可维护下性和扩展性。",-1),e("p",null,"​ 另外，控制反转通过依赖注入（DI）实现，依赖注入即通过构造器、setter 或接口注入，将对象所需的依赖传递给他，而不是让对象自行创建依赖。",-1),e("h3",{id:"控制和反转",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#控制和反转"},[e("span",null,[e("strong",null,"控制和反转")])])],-1),e("p",null,[t("​ "),e("strong",null,"控制"),t("其实就是控制对象的产生，IOC 容器根据配置文件来创建对象，在对象的生命周期内，在不同时期根据不同配置进行对象的创建和改造。")],-1),e("p",null,[t("​ "),e("strong",null,"反转"),t("就是关于创建对象且注入依赖对象这个动作，本来这个动作是程序员在代码中指定的，如对象A 依赖对象B ，在创建对象A 的代码里，我们需要写好创建对象B 的代码，才可以构造出一个完整的 A；反转后由 IOC 容器触发，IOC 容器在创建对象A 的时候，发现依赖对象B ，根据配置文件，它会创建对象B 并注入到对象A 中。")],-1)]))}const d=a(o,[["render",c],["__file","index.html.vue"]]),m=JSON.parse(`{"path":"/study/cync4asj/","title":"009、什么是 Spring IOC","lang":"zh-CN","frontmatter":{"title":"009、什么是 Spring IOC","author":null,"createTime":"2025/02/16 16:09:44","permalink":"/study/cync4asj/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":3,"title":"控制和反转","slug":"控制和反转","link":"#控制和反转","children":[]}],"readingTime":{"minutes":1.1,"words":329},"git":{"updatedTime":1739699555000,"contributors":[{"name":"洪子丹","email":"302778213@qq.com","commits":1}]},"filePathRelative":"notes/study/recite/009、什么是 Spring IOC.md"}`);export{d as comp,m as data};
